{"version":3,"sources":["../../index.js"],"names":["defaultOptions","separator","decimalPlaces","includeZero","toNumber","value","allowedTypes","string","number","type","Object","prototype","toString","call","values","includes","Infinity","isNaN","trim","replace","RegExp","testInfinite","Number","isFinite","toInt","parseInt","toFloat","parseFloat","toFixed","toPositiveInt","lowestNumber","toPositiveFloat","isPositive","toNegativeInt","highestNumber","toNegativeFloat","isNegative"],"mappings":"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","sourcesContent":["const defaultOptions = {\n  separator: ',',\n  decimalPlaces: null,\n  includeZero: false\n};\n\nexport const toNumber = (value, { separator } = defaultOptions) => {\n  const allowedTypes = { string: '[object String]', number: '[object Number]' };\n  const type = Object.prototype.toString.call(value);\n\n  if (!Object.values(allowedTypes).includes(type)) {\n    return false;\n  }\n\n  if (+value === Infinity || +value === -Infinity) {\n    return +value;\n  }\n\n  if (type === allowedTypes.number) {\n    return value - value === 0 && !isNaN(value) && value;\n  }\n\n  // We're now dealing with a string\n  value = value.trim();\n  if (value === '') {\n    return false;\n  }\n\n  value = value.replace(new RegExp(separator, 'g'), '');\n\n  value = +value;\n\n  return value - value === 0 && !isNaN(value) && value;\n};\n\nconst testInfinite = (value) => {\n  return Number.isFinite ? !Number.isFinite(value) : !isFinite(value);\n};\n\nexport const toInt = (value, { separator } = defaultOptions) => {\n  const number = toNumber(value, { separator });\n\n  if (testInfinite(number)) {\n    return number;\n  }\n\n  return number && parseInt(number, 10);\n};\n\nexport const toFloat = (value, { decimalPlaces, separator } = defaultOptions) => {\n  const number = toNumber(value, { separator });\n\n  if (testInfinite(number)) {\n    return number;\n  }\n\n  if (!decimalPlaces && decimalPlaces !== 0) {\n    return number;\n  }\n\n  return number && parseFloat(number.toFixed(decimalPlaces));\n};\n\nexport const toPositiveInt = (value, { includeZero, separator } = defaultOptions) => {\n  const number = toInt(value, { separator });\n  const lowestNumber = includeZero ? 0 : 1;\n\n  return number >= lowestNumber && number;\n};\n\nexport const toPositiveFloat = (value, { includeZero, decimalPlaces, separator } = defaultOptions) => {\n  const number = toFloat(value, { decimalPlaces, separator });\n\n  const isPositive = includeZero ? number >= 0 : number > 0;\n\n  return isPositive && number;\n};\n\nexport const toNegativeInt = (value, { includeZero, separator } = defaultOptions) => {\n  const number = toInt(value, { separator });\n  const highestNumber = includeZero ? 0 : -1;\n\n  return number <= highestNumber && number;\n};\n\nexport const toNegativeFloat = (value, { includeZero = false, decimalPlaces, separator } = defaultOptions) => {\n  const number = toFloat(value, { decimalPlaces, separator });\n  const isNegative = includeZero ? number <= 0 : number < 0;\n\n  return isNegative && number;\n};\n"],"file":"index.js"}